=head1 NAME

CAD::Mesh3D::ProvideNewFormat - Documents how to provide a new format to CAD::Mesh3D

=head1 SYNOPSIS

    ...


=head1 DESCRIPTION

L<CAD::Mesh3D> will be C<use>d to handle the math, and provides wrappers to output to or input from
a given format.  But each format will need to separately implement those input and output functions,
as well as provide some C<import()>-magic.

=head1 ENABLING FORMATS

Please tell your user to enable your format.  For example, if you're developing C<CAD::Mesh3D::PNG>,
then tell your user to enable using

    use CAD::Mesh3D qw/PNG/;

or

    use CAD::Mesh3D;
    enableFormat( 'PNG' );

If you are using a different namespace, such as C<I::Must::Be::Different::PngFormat>, they can enable
your format using

    use CAD::Mesh3D;
    enableFormat( 'PNG' => 'I::Must::Be::Different::PngFormat');

When C<enableFormat( $format )> is used without a C<$module> argument, the module name will default to
C<$module = "CAD::Mesh3D::$format">.

Either way, C<$module> is the module you're developing.

=head1 MODULE INITIALIZATION

You need to provide some C<import()>-magic in your C<import()> function.  I still have to figure that all out.

One thing you will for sure need to do is to (somehow) provide code references for input and output functions.
[TODO: describe more]

=head3 \&CAD::Mesh3D::inputFunctionNotAvail

=head3 \&CAD::Mesh3D::outputFunctionNotAvail

You can use these for your coderefs if you don't want to or cannot provide functions to input and/or output in your format.

=head1 INPUT AND OUTPUT FUNCTIONS

If you choose to provide an input and/or output functions, here are the requirements [TODO]

=head2 FILE OUTPUT

The following function will output the B<Mesh> to a 3D output file.
Currently, only STL is supported.

They can be imported into your script I<en masse> using the C<:output> tag.

=cut

=head3 outputStl

 outputStl($mesh, $file, $asc);

Outputs the given C<$mesh> to the indicated file.

The C<$file> argument is either an already-opened filehandle, or the name of the file
(if the full path is not specified, it will default to your script's directory),
or "STDOUT" or "STDERR" to direct the output to the standard handles.

The C<$asc> argument determines whether to use STL's ASCII mode: a non-zero numeric value,
or the case-insensitive text "ASCII" or "ASC" will select ASCII mode; a missing or undefined
C<$asc> argument, or a zero value or empty string, or the case-insensitive text "BINARY"
or "BIN" will select BINARY mode; if the argument contains a string other than those mentioned,
S<C<outputStl()>> will cause the script to die.

=head1 TODO

=over

=item * Plug-and-Play

=over

=item * enableFormat( I<Format> )

=item * enableFormat( I<Format> =E<gt> I<module> )

Require/import the sub-module.

    enableFormat( 'OBJ' );  # assumes CAD::Mesh3D::OBJ, input_obj() and output_obj()
    enableFormat( 'STL' => 'CAD::Mesh3D' ); # explcit about module name; this is is called internally for the default STL format

I<Module> should be the name of the module.  It should default to
'CAD::Mesh3D::I<Format>'.

I<inputFunc> should either be the name (relative to the given I<Module>) or a
coderef of an appropriate function.  You can use C<\&inputFunctionNotAvail>
to give an error message if someone tries to use an C<input()> call for a
I<Format> that can only write out: for example, if you cannot take a PNG and
come up with a reasonable Mesh3D, then you would want to give the user an error
message.  If I<inputFunc> is missing or undefined, it will use the name of
C<input_> followed by the lower case version I<Format>).

I<outputFunc> should be either the name (relative to the given moduI<Module>le)
or a coderef of an appropriate function.  You can use C<\&outputFunctionNotAvail>
to give an error message if someone tries to use an C<output()> call for a
I<Format> that can only read in: for example, if the license for some proprietary
3D format will allow you to read without paying a fee, but you have to pay a fee
to write that file type.


        !!!BZZT!!! TODO: Rework this = I realized that it would be better for each C<CAD::Mesh3D::...> format to implement its own initialization, which will set the input and output functions appropriately; save the end user from having to muck about with coderefs and the like.


=item * input( I<format>, I<file>, [I<options>])

Inputs the mesh file given that format.

Not all will have an input function (for example, cannot import a mesh from an image)

=item * output( I<format>, I<file>, [I<options>])

Output the mesh to the appropriate format.

=item * \&inputFunctionNotAvail

=item * \&outputFunctionNotAvail

Pass this to the C<enableFormat()> function

=back

=item Enable Format(s) in the C<use CAD::Mesh3D> statement

    use CAD::Mesh3D @formats, qw/:all/;

=back

=head1 AUTHOR

Peter C. Jones C<E<lt>petercj AT cpan DOT orgE<gt>>

=head1 COPYRIGHT

Copyright (C) 2017,2018,2019 Peter C. Jones

=head1 LICENSE

This program is free software; you can redistribute it and/or modify it
under the terms of either: the GNU General Public License as published
by the Free Software Foundation; or the Artistic License.

See L<http://dev.perl.org/licenses/> for more information.

=cut

1;